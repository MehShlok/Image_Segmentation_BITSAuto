{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMacGxBKtRGy0wVz/1keFZ6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"9uqXRD4phxIJ"},"outputs":[],"source":["import torch\n","from torch import optim, nn\n","from torch.utils.data import DataLoader, random_split\n","from tqdm import tqdm\n","\n","from unet import UNet\n","from carvana_dataset import CarvanaDataset\n","\n","if __name__ == \"__main__\":\n","    LEARNING_RATE = 3e-4\n","    BATCH_SIZE = 32\n","    EPOCHS = 2\n","    DATA_PATH = \"/content/drive/My Drive/BITSAuto/Assignment_3/data\"\n","    MODEL_SAVE_PATH = \"/content/drive/My Drive/BITSAuto/Assignment_3/models/unet.pth\"\n","\n","    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","    train_dataset = CarvanaDataset(DATA_PATH)\n","\n","    generator = torch.Generator().manual_seed(42)\n","    train_dataset, val_dataset = random_split(train_dataset, [0.8, 0.2], generator=generator)\n","\n","    train_dataloader = DataLoader(dataset=train_dataset,\n","                                batch_size=BATCH_SIZE,\n","                                shuffle=True)\n","    val_dataloader = DataLoader(dataset=val_dataset,\n","                                batch_size=BATCH_SIZE,\n","                                shuffle=True)\n","\n","    model = UNet(in_channels=3, num_classes=1).to(device)\n","    optimizer = optim.AdamW(model.parameters(), lr=LEARNING_RATE)\n","    criterion = nn.BCEWithLogitsLoss()\n","\n","    for epoch in tqdm(range(EPOCHS)):\n","        model.train()\n","        train_running_loss = 0\n","        for idx, img_mask in enumerate(tqdm(train_dataloader)):\n","            img = img_mask[0].float().to(device)\n","            mask = img_mask[1].float().to(device)\n","\n","            y_pred = model(img)\n","            optimizer.zero_grad()\n","\n","            loss = criterion(y_pred, mask)\n","            train_running_loss += loss.item()\n","\n","            loss.backward()\n","            optimizer.step()\n","\n","        train_loss = train_running_loss / (idx + 1)\n","\n","        model.eval()\n","        val_running_loss = 0\n","        with torch.no_grad():\n","            for idx, img_mask in enumerate(tqdm(val_dataloader)):\n","                img = img_mask[0].float().to(device)\n","                mask = img_mask[1].float().to(device)\n","\n","                y_pred = model(img)\n","                loss = criterion(y_pred, mask)\n","\n","                val_running_loss += loss.item()\n","\n","            val_loss = val_running_loss / (idx + 1)\n","\n","        print(\"-\"*30)\n","        print(f\"Train Loss EPOCH {epoch+1}: {train_loss:.4f}\")\n","        print(f\"Valid Loss EPOCH {epoch+1}: {val_loss:.4f}\")\n","        print(\"-\"*30)\n","  # Ensure the model save directory exists\n","    model_save_dir = os.path.dirname(MODEL_SAVE_PATH)\n","    if not os.path.exists(model_save_dir):\n","        os.makedirs(model_save_dir)\n","        print(f\"Created directory: {model_save_dir}\")\n","\n","    # Now save the model\n","    torch.save(model.state_dict(), MODEL_SAVE_PATH)\n","    print(f\"Model saved to {MODEL_SAVE_PATH}\")"]}]}