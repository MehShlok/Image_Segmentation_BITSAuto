{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNbokaqsQvD1JES7gZtkeP8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"RuB6CAAIhpRs"},"outputs":[],"source":["import torch\n","import matplotlib.pyplot as plt\n","from torchvision import transforms\n","from PIL import Image\n","\n","from carvana_dataset import CarvanaDataset\n","from unet import UNet\n","\n","def pred_show_image_grid(data_path, model_pth, device):\n","    model = UNet(in_channels=3, num_classes=1).to(device)\n","    model.load_state_dict(torch.load(model_pth, map_location=torch.device(device)))\n","    image_dataset = CarvanaDataset(data_path, test=True)\n","    images = []\n","    orig_masks = []\n","    pred_masks = []\n","\n","    for img, orig_mask in image_dataset:\n","        img = img.float().to(device)\n","        img = img.unsqueeze(0)\n","\n","        pred_mask = model(img)\n","\n","        img = img.squeeze(0).cpu().detach()\n","        img = img.permute(1, 2, 0)\n","\n","        pred_mask = pred_mask.squeeze(0).cpu().detach()\n","        pred_mask = pred_mask.permute(1, 2, 0)\n","        pred_mask[pred_mask < 0]=0\n","        pred_mask[pred_mask > 0]=1\n","\n","        orig_mask = orig_mask.cpu().detach()\n","        orig_mask = orig_mask.permute(1, 2, 0)\n","\n","        images.append(img)\n","        orig_masks.append(orig_mask)\n","        pred_masks.append(pred_mask)\n","\n","    images.extend(orig_masks)\n","    images.extend(pred_masks)\n","    fig = plt.figure()\n","    for i in range(1, 3*len(image_dataset)+1):\n","       fig.add_subplot(3, len(image_dataset), i)\n","       plt.imshow(images[i-1], cmap=\"gray\")\n","    plt.show()\n","\n","\n","def single_image_inference(image_pth, model_pth, device):\n","    model = UNet(in_channels=3, num_classes=1).to(device)\n","    model.load_state_dict(torch.load(model_pth, map_location=torch.device(device)))\n","\n","    transform = transforms.Compose([\n","        transforms.Resize((512, 512)),\n","        transforms.ToTensor()])\n","\n","    img = transform(Image.open(image_pth)).float().to(device)\n","    img = img.unsqueeze(0)\n","\n","    pred_mask = model(img)\n","\n","    img = img.squeeze(0).cpu().detach()\n","    img = img.permute(1, 2, 0)\n","\n","    pred_mask = pred_mask.squeeze(0).cpu().detach()\n","    pred_mask = pred_mask.permute(1, 2, 0)\n","    pred_mask[pred_mask < 0]=0\n","    pred_mask[pred_mask > 0]=1\n","\n","    fig = plt.figure()\n","    for i in range(1, 3):\n","        fig.add_subplot(1, 2, i)\n","        if i == 1:\n","            plt.imshow(img, cmap=\"gray\")\n","        else:\n","            plt.imshow(pred_mask, cmap=\"gray\")\n","    plt.show()\n","\n","\n","if __name__ == \"__main__\":\n","    SINGLE_IMG_PATH = \"./data/manual_test/03a857ce842d_15.jpg\"\n","    DATA_PATH = \"./data\"\n","    MODEL_PATH = \"./models/unet.pth\"\n","\n","    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","    pred_show_image_grid(DATA_PATH, MODEL_PATH, device)\n","    single_image_inference(SINGLE_IMG_PATH, MODEL_PATH, device)"]}]}